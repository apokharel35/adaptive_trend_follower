//@version=6
strategy('Trend Strategy - v2 w/ Session Filter, Fixed Stops & 16:05 EOD Exit', overlay=true)

// === INPUTS ===
Periods           = input.int(18,    'ATR Period')
src               = input.source(hl2,'Source')
Multiplier        = input.float(1.9, 'ATR Multiplier',               step=0.1)
BufferMultiplier  = input.float(1.5, 'Stop Loss Buffer Multiplier', step=0.1)
StopDelayBars     = input.int(2,    'Stop Trailing Delay (Bars)')

changeATR    = input.bool(false,'Change ATR Calculation Method ?')
showsignals  = input.bool(false,'Show Buy/Sell Signals ?')
highlighting = input.bool(true, 'Highlighter On/Off ?')
barcoloring  = input.bool(true, 'Bar Coloring On/Off ?')

// === DATE RANGE FILTER ===
FromMonth = input.int(9,    'From Month', 1, 12)
FromDay   = input.int(1,    'From Day',   1, 31)
FromYear  = input.int(2018, 'From Year', 1900, 2100)
ToMonth   = input.int(1,    'To Month',   1, 12)
ToDay     = input.int(31,   'To Day',     1, 31)
ToYear    = input.int(2100, 'To Year',    1900, 2100)

_start  = timestamp(FromYear, FromMonth, FromDay, 00, 00)
_finish = timestamp(ToYear,   ToMonth,   ToDay,   23, 59)
inDateRange() => time >= _start and time <= _finish

// === SESSION FILTERS (for entries only) ===
enableAsia    = input.bool(true, 'Enable Asian Session')
asiaSess      = input.session('1800-0000', 'Asian Session')
enableLondon  = input.bool(true, 'Enable London Session')
londonSess    = input.session('0000-0930', 'London Session')
enableNY      = input.bool(true, 'Enable NY Session')
nySess        = input.session('0930-1610', 'NY Session')

asiaOK       = enableAsia   and not na(time(timeframe.period, asiaSess))
londonOK     = enableLondon and not na(time(timeframe.period, londonSess))
nyOK         = enableNY     and not na(time(timeframe.period, nySess))
inAnySession = asiaOK or londonOK or nyOK

// === ATR & SUPER-TREND CALCULATION ===
atr2 = ta.sma(ta.tr, Periods)
atr  = changeATR ? ta.atr(Periods) : atr2

up  = src - Multiplier * atr
up1 = nz(up[1], up)
up  := close[1] > up1 ? math.max(up, up1) : up

dn  = src + Multiplier * atr
dn1 = nz(dn[1], dn)
dn  := close[1] < dn1 ? math.min(dn, dn1) : dn

var int trend = 1
trend := trend == -1 and close > dn1 ? 1 : trend == 1 and close < up1 ? -1 : trend

// === PLOTTING TREND LINES & SIGNALS ===
pUp = plot(trend==1  ? up : na, title='Up Trend',    style=plot.style_linebr, linewidth=2, color=color.new(color.green, 0))
pDn = plot(trend==-1 ? dn : na, title='Down Trend',  style=plot.style_linebr, linewidth=2, color=color.new(color.red,   0))

plotshape(showsignals and trend==1  and trend[1]==-1 ? up : na, title='Buy',  text='Buy',  location=location.absolute, style=shape.labelup,   size=size.tiny, color=color.new(color.green, 0), textcolor=color.new(color.white, 0))
plotshape(showsignals and trend==-1 and trend[1]==1  ? dn : na, title='Sell', text='Sell', location=location.absolute, style=shape.labeldown, size=size.tiny, color=color.new(color.red,   0), textcolor=color.new(color.white, 0))

// === HIGHLIGHTING & FILLING ===
mPlot = plot(ohlc4, title='', style=plot.style_circles, linewidth=1, color=color.new(color.white, 100))
longFillColor  = highlighting and trend == 1  ? color.green : color.white
shortFillColor = highlighting and trend == -1 ? color.red   : color.white
fill(mPlot, pUp, color.new(longFillColor,  90), title='UpTrend Highlighter')
fill(mPlot, pDn, color.new(shortFillColor, 90), title='DownTrend Highlighter')

// === ENTRY SIGNALS & TRAILING-STOPS STORAGE ===
longCond  = trend==1  and trend[1]==-1
shortCond = trend==-1 and trend[1]==1

var float longSL       = na
var float shortSL      = na
var int   longEntryBar  = na
var int   shortEntryBar = na

if longCond and inDateRange() and inAnySession
    strategy.entry('BUY',  strategy.long)
    longEntryBar := bar_index
    longSL       := na

if shortCond and inDateRange() and inAnySession
    strategy.entry('SELL', strategy.short)
    shortEntryBar := bar_index
    shortSL       := na

if strategy.position_size > 0
    if not na(longEntryBar) and (bar_index - longEntryBar >= StopDelayBars)
        longSL := na(longSL) ? up - BufferMultiplier * atr : math.max(longSL, up - BufferMultiplier * atr)
    strategy.exit('Exit Long', from_entry='BUY', stop=longSL)

if strategy.position_size < 0
    if not na(shortEntryBar) and (bar_index - shortEntryBar >= StopDelayBars)
        shortSL := na(shortSL) ? dn + BufferMultiplier * atr : math.min(shortSL, dn + BufferMultiplier * atr)
    strategy.exit('Exit Short', from_entry='SELL', stop=shortSL)

// === RESET WHEN FLAT ===
if strategy.position_size == 0
    longEntryBar  := na
    shortEntryBar := na
    longSL        := na
    shortSL       := na

// === 16:05 NYT EOD EXIT + SHAPE ===
eodExit = hour(time, "America/New_York") == 16 and minute(time, "America/New_York") == 5
if eodExit and strategy.position_size != 0
    strategy.close_all(comment='EOD Exit')
// plotshape(eodExit, title='EOD Exit', text='EOD Exit', style=shape.labeldown, location=location.abovebar, size=size.small, color=color.orange, textcolor=color.white)

// === BAR COLORING ===
b1  = ta.barssince(longCond)
s1  = ta.barssince(shortCond)
col = b1[1] < s1[1] ? color.green : b1[1] > s1[1] ? color.red : na
barcolor(barcoloring ? col : na)